Module Module1
    Structure Vec
        Dim X As Double
        Dim Y As Double
    End Structure

    Function ajouter(ByVal A As Vec, ByVal B As Vec)
        Dim C As Vec
        C.X = A.X + B.X
        C.Y = A.Y + B.Y
        Return C
    End Function

    Function neg(ByVal A As Vec)
        Dim C As Vec
        C.X = -A.X
        C.Y = -A.Y
        Return C
    End Function

    Function longueurcarree(ByVal A As Vec)
        Dim L As Double
        L = (A.X) * (A.X) + (A.Y) * (A.Y)
        Return L
    End Function

    Function longueur(ByVal A As Vec)
        Dim L As Double
        L = (longueurcarree(A)) ^ (1 / 2)
        Return L
    End Function

    Sub normaliser(ByRef A As Vec)
        Dim L As Double
        L = longueur(A)
        If L <> 0 Then
            A.X = (A.X) * (1 / L)
            A.Y = (A.Y) * (1 / L)
        End If

    End Sub

    Function mult(ByVal A As Vec, ByVal R As Double)
        Dim C As Vec
        C.X = A.X * R * Rnd()
        C.Y = A.Y * R * Rnd()
        Return C
    End Function

    Structure Boid
        Dim center As Vec
        Dim vitesse As Vec
        Dim orientation As Double
        Dim Rayon As Double
        Dim RayonRepulsion As Double
        Dim RayonOrientation As Double
    End Structure

    Structure Predateur
        Dim center As Vec
        Dim vitesse As Vec
        Dim orientation As Double
        Dim Rayon As Double
        Dim RayonGlouton As Double
    End Structure

    Structure Oeuf
        Dim center As Vec
        Dim vitesse As Vec
        Dim orientation As Double
        Dim Rayon As Double
        Dim RayonSurvie As Double
    End Structure

    Structure monde
        Dim Boids() As Boid
        Dim Predateur() As Predateur
        Dim Oeuf() As Oeuf
    End Structure

    Sub avancerB(ByRef a As Boid, ByVal dt As Double)
        a.vitesse.X = longueur(a.vitesse) * Math.Cos(a.orientation)
        a.vitesse.Y = longueur(a.vitesse) * Math.Sin(a.orientation)
        normaliser(a.vitesse)
        a.center = ajouter(a.center, mult(a.vitesse, dt))
        Dim u As Boid = a
        If a.center.X > (500 - a.Rayon) Then
            u.center.X = (500 - a.Rayon)
            If Math.Sin(a.orientation) > 0 Then
                u.orientation = (Math.PI - a.orientation)
                u.vitesse.X = longueur(u.vitesse) * Math.Cos(u.orientation)
                a = u
            ElseIf Math.Sin(a.orientation) < 0 Then
                u.orientation = (-Math.PI - a.orientation)
                u.vitesse.X = longueur(u.vitesse) * Math.Cos(u.orientation)
                a = u
            ElseIf Math.Sin(a.orientation) = 0 Then
                u.orientation = Math.PI
                u.vitesse.X = longueur(u.vitesse) * Math.Cos(u.orientation)
                a = u
            End If
        End If
        Dim v As Boid = a
        If a.center.X < a.Rayon Then
            a.center.X = a.Rayon
            If Math.Sin(a.orientation) > 0 Then
                v.orientation = (Math.PI - a.orientation)
                v.vitesse.X = longueur(v.vitesse) * Math.Cos(v.orientation)
                a = v
            ElseIf Math.Sin(a.orientation) < 0 Then
                v.orientation = (-Math.PI - a.orientation)
                v.vitesse.X = longueur(v.vitesse) * Math.Cos(v.orientation)
                a = v
            ElseIf Math.Sin(a.orientation) = 0 Then
                v.orientation = 0
                v.vitesse.X = longueur(v.vitesse) * Math.Cos(v.orientation)
                a = v
            End If
        End If
        Dim w As Boid = a
        If a.center.Y > (500 - a.Rayon) Then
            a.center.Y = (500 - a.Rayon)
            w.orientation = (-a.orientation)
            w.vitesse.Y = longueur(w.vitesse) * Math.Sin(w.orientation)
            a = w
        End If
        Dim x As Boid = a
        If a.center.Y < a.Rayon Then
            a.center.Y = a.Rayon
            x.orientation = (-a.orientation)
            x.vitesse.Y = longueur(x.vitesse) * Math.Sin(x.orientation)
            a = x
        End If
    End Sub

    Sub avancerP(ByRef a As Predateur, ByVal dt As Double)
        normaliser(a.vitesse)
        a.vitesse.X = longueur(a.vitesse) * Math.Cos(a.orientation)
        a.vitesse.Y = longueur(a.vitesse) * Math.Sin(a.orientation)
        a.center = ajouter(a.center, mult(a.vitesse, dt))
        Dim u As Predateur = a
        If a.center.X > (500 - a.Rayon) Then
            u.center.X = (500 - a.Rayon)
            If Math.Sin(a.orientation) > 0 Then
                u.orientation = (Math.PI - a.orientation)
                u.vitesse.X = longueur(u.vitesse) * Math.Cos(u.orientation)
                a = u
            ElseIf Math.Sin(a.orientation) < 0 Then
                u.orientation = (-Math.PI - a.orientation)
                u.vitesse.X = longueur(u.vitesse) * Math.Cos(u.orientation)
                a = u
            ElseIf Math.Sin(a.orientation) = 0 Then
                u.orientation = Math.PI
                u.vitesse.X = longueur(u.vitesse) * Math.Cos(u.orientation)
                a = u
            End If
        End If
        Dim v As Predateur = a
        If a.center.X < 0 Then
            a.center.X = 0
            If Math.Sin(a.orientation) > 0 Then
                v.orientation = (Math.PI - a.orientation)
                v.vitesse.X = longueur(v.vitesse) * Math.Cos(v.orientation)
                a = v
            ElseIf Math.Sin(a.orientation) < 0 Then
                v.orientation = (-Math.PI - a.orientation)
                v.vitesse.X = longueur(v.vitesse) * Math.Cos(v.orientation)
                a = v
            ElseIf Math.Sin(a.orientation) = 0 Then
                v.orientation = 0
                v.vitesse.X = longueur(v.vitesse) * Math.Cos(v.orientation)
                a = v
            End If
        End If
        Dim w As Predateur = a
        If a.center.Y > (500 - a.Rayon) Then
            a.center.Y = (500 - a.Rayon)
            w.orientation = (-a.orientation)
            w.vitesse.Y = longueur(w.vitesse) * Math.Sin(w.orientation)
            a = w
        End If
        Dim x As Predateur = a
        If a.center.Y < 0 Then
            a.center.Y = 0
            x.orientation = (-a.orientation)
            x.vitesse.Y = longueur(x.vitesse) * Math.Sin(x.orientation)
            a = x
        End If
    End Sub

    Sub uupdate(ByRef m As monde, ByVal dt As Double)
        Dim i As Double
        If m.Boids Is Nothing Then
        Else
            For i = 0 To m.Boids.GetLength(0) - 1
                avancerB(m.Boids(i), dt)
            Next
        End If
        Dim j As Double
        For j = 0 To m.Predateur.GetLength(0) - 1
            avancerP(m.Predateur(j), dt)
        Next
        Dim k As Double
        If m.Oeuf Is Nothing Then
        Else
            For k = 0 To m.Oeuf.GetLength(0) - 1
                avancerO(m.Oeuf(k), dt)
            Next
        End If
    End Sub

    Sub follow(ByRef m As monde, ByVal nbp As Integer)
        'Pour former un banc de poissons
        Dim i As Integer
        Dim j As Integer
        Dim K As Vec
        For i = 0 To nbp - 1
            For j = 0 To nbp - 1
                If i <> j Then
                    K = ajouter(m.Boids(i).center, neg(m.Boids(j).center))
                    If longueur(K) < m.Boids(i).RayonRepulsion Then
                        If m.Boids(i).center.X > 0 And m.Boids(i).center.Y > 0 And m.Boids(i).center.X < (500 - m.Boids(i).Rayon) And m.Boids(i).center.Y < (500 - m.Boids(i).Rayon) Then
                            If m.Boids(j).orientation < 0 Then
                                m.Boids(i).orientation = Math.PI * Rnd()
                                m.Boids(j).orientation = -Math.PI + m.Boids(i).orientation
                            ElseIf m.Boids(j).orientation >= 0 Then
                                m.Boids(i).orientation = -Math.PI * Rnd()
                                m.Boids(j).orientation = Math.PI - m.Boids(i).orientation
                            End If
                            m.Boids(i).vitesse.X = longueur(m.Boids(i).vitesse) * Math.Cos(m.Boids(i).orientation)
                            m.Boids(i).vitesse.Y = longueur(m.Boids(i).vitesse) * Math.Sin(m.Boids(i).orientation)
                            m.Boids(j).vitesse.X = longueur(m.Boids(j).vitesse) * Math.Cos(m.Boids(j).orientation)
                            m.Boids(j).vitesse.Y = longueur(m.Boids(j).vitesse) * Math.Sin(m.Boids(j).orientation)
                        End If
                    End If
                    If longueur(K) < (m.Boids(i).RayonOrientation) Then
                        m.Boids(i).orientation = m.Boids(j).orientation
                    End If
                End If
            Next
        Next
    End Sub

    Sub gloutonner(ByRef m As monde, ByRef nbp As Integer, ByVal nbr As Integer, ByRef Pmgr As Integer, ByVal vmax As Integer, ByVal vmin As Integer)
        'Cette procÃ©dure comprend le fait de choisir sa proie, la traquer et la manger.
        Dim i As Integer
        Dim j As Integer
        Dim K As Vec
        Dim P As Vec
        Dim O As Vec
        Dim x As Integer
        Dim a As Vec
        Dim h As Integer
        Dim Z As Vec
        Dim tr As Integer = 1

        For i = 0 To nbr - 1
            '   Choisir sa proie, la traquer, la manger.
            '3)Manger sa proie
            If m.Boids Is Nothing Then
            Else
                For j = 0 To nbp - 1
                    K = ajouter(m.Predateur(i).center, neg(m.Boids(j).center))
                    If longueur(K) < m.Predateur(i).RayonGlouton Then
                        For h = j To nbp - 2
                            m.Boids(h) = m.Boids(h + 1)
                        Next
                        Pmgr = Pmgr + 1
                        nbp = nbp - 1
                        ReDim Preserve m.Boids(nbp)
                    End If
                Next

                '1)Choisir sa proie
                x = 0
                For j = 0 To nbp - 2
                    O = ajouter(m.Predateur(i).center, neg(m.Boids(j).center))
                    P = ajouter(m.Predateur(i).center, neg(m.Boids(j + 1).center))
                    If longueur(O) < longueur(P) Then
                        x = j
                    End If
                Next

                '2)Traquer sa proie
                Z = ajouter(m.Predateur(i).center, neg(m.Boids(x).center))
                If longueur(Z) < (Rnd() * 3 * m.Predateur(i).Rayon) Then
                    a = ajouter(m.Boids(x).center, neg(m.Predateur(i).center))
                    If a.X > 0 Then
                        If a.Y > 0 Then
                            m.Predateur(i).orientation = (Math.Acos(a.X / longueur(Z)))
                        ElseIf a.Y < 0 Then
                            m.Predateur(i).orientation = (Math.Asin(a.Y / longueur(Z)))
                        ElseIf a.Y = 0 Then
                            m.Predateur(i).orientation = 0
                        End If
                    ElseIf a.X < 0 Then
                        If a.Y > 0 Then
                            m.Predateur(i).orientation = (Math.Acos(a.X / longueur(Z)))
                        ElseIf a.Y < 0 Then
                            m.Predateur(i).orientation = -(Math.Acos(a.X / longueur(Z)))
                        ElseIf a.Y = 0 Then
                            m.Predateur(i).orientation = Math.PI
                        End If
                    ElseIf a.X = 0 Then
                        If a.Y = 1 Then
                            m.Predateur(i).orientation = (Math.PI / 2)
                        ElseIf a.Y = -1 Then
                            m.Predateur(i).orientation = -(Math.PI / 2)
                        End If
                    End If
                    m.Predateur(i).vitesse.X = longueur(Z) * Math.Cos(m.Boids(x).orientation)
                    m.Predateur(i).vitesse.Y = longueur(Z) * Math.Sin(m.Boids(x).orientation)
                End If
            End If
        Next
    End Sub

    Sub EviterPre(ByRef m As monde, ByVal nbr As Integer)
        'Eviter ses congÃ©nÃ¨res prÃ©dateurs
        Dim i As Integer
        Dim K As Vec
        For i = 0 To nbr - 1
            For j = 0 To nbr - 1
                If i <> j Then
                    K = ajouter(m.Predateur(i).center, neg(m.Predateur(j).center))
                    If longueur(K) < (Rnd() * m.Predateur(i).Rayon) Then
                        If m.Predateur(i).center.X > 0 And m.Predateur(i).center.Y > 0 And m.Predateur(i).center.X < (500 - m.Predateur(i).Rayon) And m.Predateur(i).center.X < (500 - m.Predateur(i).Rayon) Then
                            If m.Predateur(j).orientation < 0 Then
                                m.Predateur(i).orientation = Math.PI * Rnd()
                                m.Predateur(j).orientation = -Math.PI + m.Predateur(i).orientation
                            ElseIf m.Predateur(j).orientation >= 0 Then
                                m.Predateur(i).orientation = -Math.PI * Rnd()
                                m.Predateur(j).orientation = Math.PI - m.Predateur(i).orientation
                            End If
                            m.Predateur(i).vitesse.X = longueur(m.Predateur(i).vitesse) * Math.Cos(m.Predateur(i).orientation)
                            m.Predateur(i).vitesse.Y = longueur(m.Predateur(i).vitesse) * Math.Sin(m.Predateur(i).orientation)
                            m.Predateur(j).vitesse.X = longueur(m.Predateur(j).vitesse) * Math.Cos(m.Predateur(j).orientation)
                            m.Predateur(j).vitesse.Y = longueur(m.Predateur(j).vitesse) * Math.Sin(m.Predateur(j).orientation)
                        End If
                    End If
                End If
            Next
        Next
    End Sub

    Sub Pondre(ByRef m As monde, ByVal nbp As Integer, ByRef OV As Integer, ByRef nbo As Integer, ByVal rmax As Integer, ByVal rmin As Integer)
        Dim a As Integer
        If m.Boids Is Nothing Then
        Else
            If (Int(Rnd() * 100)) = (Int(Rnd() * 100)) Then
                a = Int(Rnd() * nbp)
                OV = OV + 1
                ReDim m.Oeuf(OV - 1)
                m.Oeuf(OV - 1).center = m.Boids(a).center
                m.Oeuf(OV - 1).Rayon = (10 ^ -5) * (rmax - rmin) + rmin
                nbo = nbo + 1

                m.Oeuf(OV - 1).orientation = Math.PI / 2
                m.Oeuf(OV - 1).vitesse.X = longueur(m.Oeuf(OV - 1).vitesse) * Math.Cos(m.Oeuf(OV - 1).orientation)
                m.Oeuf(OV - 1).vitesse.Y = longueur(m.Oeuf(OV - 1).vitesse) * Math.Sin(m.Oeuf(OV - 1).orientation)
            End If
        End If
    End Sub

    Sub avancerO(ByRef a As Oeuf, ByVal dt As Double)
        a.orientation = Math.PI / 2
        a.vitesse.X = longueur(a.vitesse) * Math.Cos(a.orientation)
        a.vitesse.Y = longueur(a.vitesse) * Math.Sin(a.orientation)
    End Sub


End Module

