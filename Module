Module Module1
    Structure Vec
        Dim X As Double
        Dim Y As Double
    End Structure

    Function ajouter(ByVal A As Vec, ByVal B As Vec)
        Dim C As Vec
        C.X = A.X + B.X
        C.Y = A.Y + B.Y
        Return C
    End Function

    Function neg(ByVal A As Vec)
        Dim C As Vec
        C.X = -A.X
        C.Y = -A.Y
        Return C
    End Function

    Function longueurcarree(ByVal A As Vec)
        Dim L As Double
        L = (A.X) * (A.X) + (A.Y) * (A.Y)
        Return L
    End Function

    Function longueur(ByVal A As Vec)
        Dim L As Double
        L = (longueurcarree(A)) ^ (1 / 2)
        Return L
    End Function

    Sub normaliser(ByRef A As Vec)
        Dim L As Double
        L = longueur(A)
        If L <> 0 Then
            A.X = (A.X) * (1 / L)
            A.Y = (A.Y) * (1 / L)
        End If

    End Sub

    Function mult(ByVal A As Vec, ByVal R As Double)
        Dim C As Vec
        C.X = A.X * R * Rnd()
        C.Y = A.Y * R * Rnd()
        Return C
    End Function

    Structure Boid
        Dim center As Vec
        Dim vitesse As Vec
        Dim orientation As Double
        Dim Rayon As Double
        Dim RayonRepulsion As Double
        Dim RayonOrientation As Double
    End Structure

    Structure Predateur
        Dim center As Vec
        Dim vitesse As Vec
        Dim orientation As Double
        Dim Rayon As Double
        Dim RayonGlouton As Double
    End Structure

    Structure monde
        Dim Boids() As Boid
        Dim Predateur() As Predateur
    End Structure

    Sub avancerB(ByRef a As Boid, ByVal dt As Double)
        normaliser(a.vitesse)
        a.vitesse.X = longueur(a.vitesse) * Math.Cos(a.orientation)
        a.vitesse.Y = longueur(a.vitesse) * Math.Sin(a.orientation)
        a.center = ajouter(a.center, mult(a.vitesse, dt))
        Dim u As Boid = a
        If a.center.X > (500 - a.Rayon) Then
            u.center.X = (500 - a.Rayon)
            If Math.Sin(a.orientation) > 0 Then
                u.orientation = (Math.PI - a.orientation)
                u.vitesse.X = longueur(u.vitesse) * Math.Cos(u.orientation)
                a = u
            ElseIf Math.Sin(a.orientation) < 0 Then
                u.orientation = (-Math.PI - a.orientation)
                u.vitesse.X = longueur(u.vitesse) * Math.Cos(u.orientation)
                a = u
            ElseIf Math.Sin(a.orientation) = 0 Then
                u.orientation = Math.PI
                u.vitesse.X = longueur(u.vitesse) * Math.Cos(u.orientation)
                a = u
            End If
        End If
        Dim v As Boid = a
        If a.center.X < a.Rayon Then
            a.center.X = a.Rayon
            If Math.Sin(a.orientation) > 0 Then
                v.orientation = (Math.PI - a.orientation)
                v.vitesse.X = longueur(v.vitesse) * Math.Cos(v.orientation)
                a = v
            ElseIf Math.Sin(a.orientation) < 0 Then
                v.orientation = (-Math.PI - a.orientation)
                v.vitesse.X = longueur(v.vitesse) * Math.Cos(v.orientation)
                a = v
            ElseIf Math.Sin(a.orientation) = 0 Then
                v.orientation = 0
                v.vitesse.X = longueur(v.vitesse) * Math.Cos(v.orientation)
                a = v
            End If
        End If
        Dim w As Boid = a
        If a.center.Y > (500 - a.Rayon) Then
            a.center.Y = (500 - a.Rayon)
            w.orientation = (-a.orientation)
            w.vitesse.Y = longueur(w.vitesse) * Math.Sin(w.orientation)
            a = w
        End If
        Dim x As Boid = a
        If a.center.Y < a.Rayon Then
            a.center.Y = a.Rayon
            x.orientation = (-a.orientation)
            x.vitesse.Y = longueur(x.vitesse) * Math.Sin(x.orientation)
            a = x
        End If
    End Sub

    Sub avancerP(ByRef a As Predateur, ByVal dt As Double)
        normaliser(a.vitesse)
        a.vitesse.X = longueur(a.vitesse) * Math.Cos(a.orientation)
        a.vitesse.Y = longueur(a.vitesse) * Math.Sin(a.orientation)
        a.center = ajouter(a.center, mult(a.vitesse, dt))
        Dim u As Predateur = a
        If a.center.X > (500 - a.Rayon) Then
            u.center.X = (500 - a.Rayon)
            If Math.Sin(a.orientation) > 0 Then
                u.orientation = (Math.PI - a.orientation)
                u.vitesse.X = longueur(u.vitesse) * Math.Cos(u.orientation)
                a = u
            ElseIf Math.Sin(a.orientation) < 0 Then
                u.orientation = (-Math.PI - a.orientation)
                u.vitesse.X = longueur(u.vitesse) * Math.Cos(u.orientation)
                a = u
            ElseIf Math.Sin(a.orientation) = 0 Then
                u.orientation = Math.PI
                u.vitesse.X = longueur(u.vitesse) * Math.Cos(u.orientation)
                a = u
            End If
        End If
        Dim v As Predateur = a
        If a.center.X < a.Rayon Then
            a.center.X = a.Rayon
            If Math.Sin(a.orientation) > 0 Then
                v.orientation = (Math.PI - a.orientation)
                v.vitesse.X = longueur(v.vitesse) * Math.Cos(v.orientation)
                a = v
            ElseIf Math.Sin(a.orientation) < 0 Then
                v.orientation = (-Math.PI - a.orientation)
                v.vitesse.X = longueur(v.vitesse) * Math.Cos(v.orientation)
                a = v
            ElseIf Math.Sin(a.orientation) = 0 Then
                v.orientation = 0
                v.vitesse.X = longueur(v.vitesse) * Math.Cos(v.orientation)
                a = v
            End If
        End If
        Dim w As Predateur = a
        If a.center.Y > (500 - a.Rayon) Then
            a.center.Y = (500 - a.Rayon)
            w.orientation = (-a.orientation)
            w.vitesse.Y = longueur(w.vitesse) * Math.Sin(w.orientation)
            a = w
        End If
        Dim x As Predateur = a
        If a.center.Y < a.Rayon Then
            a.center.Y = a.Rayon
            x.orientation = (-a.orientation)
            x.vitesse.Y = longueur(x.vitesse) * Math.Sin(x.orientation)
            a = x
        End If
    End Sub

    Sub uupdate(ByRef m As monde, ByVal dt As Double)
        Dim i As Double
        For i = 0 To m.Boids.GetLength(0) - 1
            avancerB(m.Boids(i), dt)
        Next
        Dim j As Double
        For j = 0 To m.Predateur.GetLength(0) - 1
            avancerP(m.Predateur(j), dt)
        Next
    End Sub

    Sub follow(ByRef m As monde, ByVal n As Integer)
        Dim i As Integer
        Dim j As Integer
        Dim K As Vec
        For i = 0 To n - 1
            For j = 0 To n - 1
                If i <> j Then
                    K = ajouter(m.Boids(i).center, neg(m.Boids(j).center))
                    If longueur(K) < m.Boids(i).RayonOrientation Then
                        m.Boids(i).orientation = m.Boids(j).orientation
                    End If
                    If longueur(K) < m.Boids(i).RayonRepulsion Then
                        m.Boids(i).orientation = -m.Boids(j).orientation
                    End If
                End If
            Next
        Next

    End Sub



    



End Module
